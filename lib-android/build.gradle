apply plugin: 'com.android.library'

android {
    compileSdk 34
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 34
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    namespace 'com.google.capillary.android'
}

// Checkstyle doesn't run automatically with android
tasks.register('checkstyleMain', Checkstyle) {
    source "src/main/java"
    include '**/*.java'
    classpath = files()
}
tasks.register('checkStyleTest', Checkstyle) {
    source 'src/test/java'
    include '**/*.java'
    classpath = files()
}
tasks.register('checkStyleAndroidTest', Checkstyle) {
    source 'src/androidTest/java'
    include '**/*.java'
    classpath = files()
}
check.dependsOn checkstyleMain, checkStyleTest, checkStyleAndroidTest

dependencies {
    api(project(':lib'), {
        exclude group: 'com.google.crypto.tink', module: '*'
    })
    implementation('com.google.crypto.tink:tink-android:1.1.0', {
        exclude group: 'com.google.protobuf', module: '*'
    })
    implementation('com.google.crypto.tink:apps-webpush:1.10.0', {
        exclude group: 'com.google.crypto.tink', module: '*'
    })
    implementation 'com.google.protobuf:protobuf-java:3.25.2'
    implementation 'joda-time:joda-time:2.12.6'
    implementation 'com.android.support:support-annotations:28.0.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

tasks.register('javadoc', Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += files(project.android.getBootClasspath())
    failOnError false
}

// Only needed when cutting releases. lib.jar has to be created before running the following.
/*
afterEvaluate {
    javadoc.classpath += files(android.libraryVariants.collect
            { variant ->
                variant.javaCompiler.classpath.files
            })
}
*/

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

//apply from: 'publish.gradle'